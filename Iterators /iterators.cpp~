#include <vector> 
#include <iostream> 
#include <fstream>
#include <algorithm>
#include <list>

#include "point.h"

template <typename T> 
int smallest_element (const std::vector<T>& v);

int main()
{
	std::vector<point> v1; 
	double x,y; 
	std::ifstream ipfile; 

	ipfile.open("points.txt"); 
 	int i=0; 
	while(ipfile >> x >> y){
		v1.push_back(point (x,y));
		std::cout << v1[i].get_odist() << std::endl;
		i++;	
	}
	
	std::cout<<std::endl;
	
	//min_element through own function
	//std::cout << smallest_element<point>(v1) << std::endl; 
	
	//min_element through min_element method in algorithm
	typename std::vector<point>::const_iterator it;
	it = std::min_element(v1.begin(), v1.end()); 
	std::cout << it-v1.begin() << std::endl;
	std::cout << *it << std::endl;

	/*
	std::sort(v1.begin(), v1.end()); 
	typename std::vector<point>::const_iterator it;
	for(it=v1.begin(); it!=v1.end(); it++)
		std::cout << (*it).get_odist() << std::endl;
	*/

	return 0;
}


template <typename T> 
int smallest_element(const std::vector<T>& v)
{
	typename std::vector<T>::const_iterator it;
	T min = *v.begin(); 
	int min_index = 0; 	
	for(it = v.begin(); it != v.end(); ++it)
	{	
		if(*it < min){
			min = *it;	
			min_index = it-v.begin(); 
		}
	}
	return min_index; 	
}


	
